// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/avatar.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "go-gravatar/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAvatarRepository is a mock of AvatarRepository interface.
type MockAvatarRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAvatarRepositoryMockRecorder
}

// MockAvatarRepositoryMockRecorder is the mock recorder for MockAvatarRepository.
type MockAvatarRepositoryMockRecorder struct {
	mock *MockAvatarRepository
}

// NewMockAvatarRepository creates a new mock instance.
func NewMockAvatarRepository(ctrl *gomock.Controller) *MockAvatarRepository {
	mock := &MockAvatarRepository{ctrl: ctrl}
	mock.recorder = &MockAvatarRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvatarRepository) EXPECT() *MockAvatarRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAvatarRepository) Create(ctx context.Context, avatar *model.Avatar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, avatar)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAvatarRepositoryMockRecorder) Create(ctx, avatar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAvatarRepository)(nil).Create), ctx, avatar)
}

// Delete mocks base method.
func (m *MockAvatarRepository) Delete(ctx context.Context, hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAvatarRepositoryMockRecorder) Delete(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAvatarRepository)(nil).Delete), ctx, hash)
}

// GetByHash mocks base method.
func (m *MockAvatarRepository) GetByHash(ctx context.Context, hash string) (*model.Avatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHash", ctx, hash)
	ret0, _ := ret[0].(*model.Avatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHash indicates an expected call of GetByHash.
func (mr *MockAvatarRepositoryMockRecorder) GetByHash(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHash", reflect.TypeOf((*MockAvatarRepository)(nil).GetByHash), ctx, hash)
}

// Update mocks base method.
func (m *MockAvatarRepository) Update(ctx context.Context, avatar *model.Avatar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, avatar)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAvatarRepositoryMockRecorder) Update(ctx, avatar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAvatarRepository)(nil).Update), ctx, avatar)
}
